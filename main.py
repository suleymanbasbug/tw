import random
import time
from seleniumbase import BaseCase
from utils.mail_password import get_verification_code
from utils.user_agents import USER_AGENTS
from utils.stealth import StealthHelper
from utils.form_handler import FormHandler
from utils.captcha_detector import CaptchaDetector

class TwitterSignup(BaseCase):
    
    def get_random_user_agent(self):
        """Random user agent seÃ§imi"""
        return random.choice(USER_AGENTS)
    
    
    def test_signup(self):
        try:
            email_address = "xscmfwnu@vargosmail.com"
            password = "bnycmoflS!4565"
            
            # Random user agent seÃ§imi
            random_user_agent = self.get_random_user_agent()
            print(f"SeÃ§ilen User Agent: {random_user_agent}")
            
            # CDP Mode ile Twitter signup sayfasÄ±nÄ± aÃ§
            print("CDP Mode ile Twitter signup sayfasÄ± aÃ§Ä±lÄ±yor...")
            self.activate_cdp_mode("https://x.com/i/flow/signup")
            print("CDP Mode aktif edildi!")
            
            # Sayfa yÃ¼klenmesini bekle
            self.sleep(random.uniform(3.0, 5.0))
            
            # Stealth ayarlarÄ±nÄ± kur
            print("Stealth ayarlarÄ± kuruluyor...")
            stealth = StealthHelper(self.cdp)
            stealth.setup_all_stealth()
            
            # Captcha detector'Ä± baÅŸlat
            print("Captcha detector baÅŸlatÄ±lÄ±yor...")
            captcha_detector = CaptchaDetector(self.cdp)
            captcha_detector.setup_network_listener()
            
            # Sayfa yÃ¼klenmesini bekle
            self.sleep(random.uniform(3.0, 5.0))
            
            # Create account butonunu bul ve CDP Mode ile tÄ±kla
            print("Create account butonu aranÄ±yor...")
            self.wait_for_element('//button[contains(text(), "Create account")]', timeout=20)
            
            # CDP Mode ile insan benzeri tÄ±klama
            self.sleep(random.uniform(1.5, 2.5))
            self.cdp.click('//button[contains(text(), "Create account")]')
            print("Create account butonu CDP Mode ile tÄ±klandÄ±!")

            # SayfanÄ±n yÃ¼klenmesini bekle
            self.sleep(random.uniform(3.0, 5.0))

            # Use email instead butonunu bul ve CDP Mode ile tÄ±kla
            print("Use email instead butonu aranÄ±yor...")
            self.wait_for_element('//button[contains(text(), "Use email instead")]', timeout=20)
            self.sleep(random.uniform(1.5, 2.5))
            self.cdp.click('//button[contains(text(), "Use email instead")]')
            print("Use email instead butonu CDP Mode ile tÄ±klandÄ±!")

            # SayfanÄ±n yÃ¼klenmesini bekle
            self.sleep(random.uniform(3.0, 5.0))

            # Form handler'Ä± baÅŸlat
            form = FormHandler(self)
            
            # Form alanlarÄ±nÄ± doldur
            form.fill_name("hasan")
            form.fill_email(email_address)
            form.fill_birthdate("June", "27", "1984")

            # Form validasyonunu tetikle
            form.validate_form()

            # Next buton durumunu kontrol et
            if form.check_next_button_status():
                print("Next butonu aktif! TÄ±klanÄ±yor...")
                form.click_next_button()
                print("Next butonu CDP Mode ile tÄ±klandÄ±!")
            else:
                print("Next butonu hala disabled! Manuel mÃ¼dahale gerekebilir.")
                form.get_form_debug_info()
                
                # Manuel mÃ¼dahale iÃ§in bekle
                try:
                    input("Next butonu aktif olmadÄ±. Manuel kontrol iÃ§in Enter'a basÄ±n...")
                except EOFError:
                    print("Test ortamÄ±nda manuel mÃ¼dahale atlandÄ±...")

            # Captcha kontrolÃ¼ yap
            print("Captcha kontrolÃ¼ yapÄ±lÄ±yor...")
            self.sleep(random.uniform(2.0, 4.0))
            
            # Captcha yÃ¼klenme durumunu kontrol et
            if captcha_detector.check_if_captcha_loaded():
                print("ğŸš¨ Captcha tespit edildi! Manuel Ã§Ã¶zÃ¼m bekleniyor...")
                captcha_detector.wait_for_manual_solve()
                
                # Gelecekte captcha solver entegrasyonu iÃ§in placeholder
                # TODO: Otomatik captcha Ã§Ã¶zÃ¼m servisi entegrasyonu
                # captcha_solver = CaptchaSolver()
                # solution = captcha_solver.solve_captcha()
                
            else:
                print("âœ… Captcha tespit edilmedi, normal akÄ±ÅŸ devam ediyor...")

            # E-posta doÄŸrulama sayfasÄ±nÄ± bekle
            self.sleep(random.uniform(3.0, 5.0))
            print("DoÄŸrulama kodu gÃ¶nderildi!")
            
            # DoÄŸrulama kodunu al
            self.sleep(random.uniform(2.0, 4.0))
            print("E-posta doÄŸrulama kodu bekleniyor...")
            verification_code = get_verification_code(email_address, password)
            
            if verification_code:
                print(f"DoÄŸrulama kodu alÄ±ndÄ±: {verification_code}")
                
                # DoÄŸrulama kodunu gir
                form.fill_verification_code(verification_code)
                
                # Next butonuna tÄ±kla
                self.sleep(random.uniform(2.0, 4.0))
                form.click_next_button()
                
                # Hesap oluÅŸturma tamamlanmasÄ±nÄ± bekle
                self.sleep(random.uniform(5.0, 8.0))
                print("Hesap oluÅŸturma iÅŸlemi tamamlandÄ±!")
                print("CDP Mode sayesinde robot tespiti bypass edildi!")
                
            else:
                print("DoÄŸrulama kodu alÄ±namadÄ±!")

            # Captcha detector'Ä± temizle
            captcha_detector.cleanup()
            
            # Enter'a basÄ±lmasÄ±nÄ± bekle
            try:
                input("Ã‡Ä±kmak iÃ§in Enter'a basÄ±n...")
            except EOFError:
                print("Test ortamÄ±nda Ã§Ä±kÄ±ÅŸ atlandÄ±...")
            
        except Exception as e:
            print(f"Hata oluÅŸtu: {e}")
            print(f"Hata tÃ¼rÃ¼: {type(e).__name__}")
            import traceback
            traceback.print_exc()
            
            # Hata durumunda da tarayÄ±cÄ±yÄ± aÃ§Ä±k tut
            print("Hata nedeniyle tarayÄ±cÄ± aÃ§Ä±k tutuluyor...")
            try:
                input("Hata analizi iÃ§in Enter'a basÄ±n...")
            except EOFError:
                print("Test ortamÄ±nda hata analizi atlandÄ±...")

if __name__ == "__main__":
    # Minimal ayarlarla Ã§alÄ±ÅŸtÄ±r
    BaseCase.main(
        __name__, 
        __file__, 
        "--proxy=3ed492ea9d26670b06c1__cr.us:4e17d20cd644f516@gw.dataimpulse.com:823",
        "--locale=en", 
        "--headed", 
        "--uc",  # UC Mode
        "--incognito"  # Incognito mode ile daha iyi gizlilik
    )